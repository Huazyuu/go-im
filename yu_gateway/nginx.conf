# docker
#  docker run --name my-nginx -v D:/goProject/Grpc_IM/server/yu_gateway/nginx.conf:/etc/nginx/nginx.conf:ro -p 9000:80 -d nginx
# 全局块：设置影响 Nginx 服务器整体运行的全局配置指令
# 指定 Nginx 工作进程运行的用户为 root
# 注意：在生产环境中，为安全考虑，建议使用普通用户
user nginx;

# 设置 Nginx 工作进程的数量，这里设为 1
# 通常可设置为服务器 CPU 核心数，如 worker_processes auto; 会自动根据 CPU 核心数设置
worker_processes  auto;


# events 块：配置 Nginx 服务器与用户的网络连接
events {
    # 设置每个工作进程可以同时处理的最大连接数
    # 该数值需结合服务器性能和实际需求调整
    worker_connections  1024;
}

# http 块：Nginx 配置文件的核心部分，包含大部分 HTTP 服务器相关配置指令
http {
    server_tokens off;  # 隐藏 Nginx 版本号
    
    # 开启 Gzip 压缩功能，可减少数据传输量，提高网站访问速度
    gzip on;
    # 设置允许压缩的最小响应体大小为 5KB
    # 小于该大小的响应体不会进行压缩
    gzip_min_length  5k;
    # 设置处理压缩数据的缓冲区大小
    # 这里表示使用 4 个大小为 16KB 的缓冲区
    gzip_buffers     4 16k;
    # 指定支持 Gzip 压缩的 HTTP 协议版本为 1.0
    gzip_http_version 1.0;
    # 设置 Gzip 压缩级别，范围是 1 - 9
    # 数值越大压缩比越高，但 CPU 消耗也越大，这里设为 7
    gzip_comp_level 7;
    # 指定需要进行 Gzip 压缩的文件类型
    gzip_types       text/plain application/javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
    # 在响应头中添加 Vary: Accept-Encoding
    # 告知缓存服务器该响应的压缩情况与客户端的 Accept-Encoding 请求头有关
    gzip_vary on;

    # 包含 mime.types 文件，该文件定义了各种文件类型对应的 MIME 类型
    include       mime.types;
    # 设置默认的 MIME 类型
    default_type  application/octet-stream;

    # 开启 sendfile 功能，可提高文件传输效率
    sendfile        on;
    # 设置客户端与服务器保持连接的超时时间为 500 秒
    keepalive_timeout  500;
    # 设置客户端请求体的最大大小为 2000MB
    client_max_body_size 2000m;

    # server 块：配置一个虚拟主机，可监听不同端口或处理不同域名
    server {    
        # 指定该虚拟主机监听的端口为 80
        listen 80;
        # 指定访问日志的存储路径
        access_log /var/log/nginx/access.log;
        # 指定错误日志的存储路径
        error_log /var/log/nginx/error.log;

        # location 块：匹配所有请求路径
        location / {
            # 开启静态文件的 Gzip 压缩功能
            gzip_static on;
        }

        # location 块：匹配以 /api/auth/ 开头的请求路径
        location /api/auth/ {
            # 将匹配的请求代理到 http://127.0.0.1:20261 地址
            proxy_pass http://host.docker.internal:20261;
            # 不传递请求体
#             proxy_pass_request_body off;
            # 设置代理请求的 Content-Length 请求头为空
#             proxy_set_header Content-Length "";
            # 将客户端原始的请求 URI 添加到代理请求头中
            proxy_set_header X-Original-URI $request_uri;
            # 将客户端请求的主机名添加到代理请求头中
            proxy_set_header Host $http_host;
            # 将客户端的真实 IP 地址添加到代理请求头中
            proxy_set_header X-Real-IP $remote_addr;
            # 将客户端的远程主机地址添加到代理请求头中
            proxy_set_header REMOTE-HOST $remote_addr;
            # 将客户端的 IP 地址和经过的代理服务器 IP 地址添加到代理请求头中
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # location 块：匹配以 /api/user/ 开头的请求路径
        location  /api/user/ {
            # 指定鉴权地址，请求会先经过 /api/auth/ 进行鉴权
            auth_request /api/auth/; 
            # 将客户端请求的主机名添加到代理请求头中
            proxy_set_header Host $http_host;
            # 将客户端的真实 IP 地址添加到代理请求头中
            proxy_set_header X-Real-IP $remote_addr;
            # 将客户端的远程主机地址添加到代理请求头中
            proxy_set_header REMOTE-HOST $remote_addr;
            # 将客户端的 IP 地址和经过的代理服务器 IP 地址添加到代理请求头中
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # 将匹配的请求代理到 http://127.0.0.1:20262 地址
            proxy_pass http://host.docker.internal:20262;
        }

        # location 块：匹配以 /api/chat/ 开头的请求路径
        location /api/chat/ {
            # 指定鉴权地址，请求会先经过 /api/auth 进行鉴权
            auth_request /api/auth; 
            # 将客户端请求的主机名添加到代理请求头中
            proxy_set_header Host $http_host;
            # 将客户端的真实 IP 地址添加到代理请求头中
            proxy_set_header X-Real-IP $remote_addr;
            # 将客户端的远程主机地址添加到代理请求头中
            proxy_set_header REMOTE-HOST $remote_addr;
            # 将客户端的 IP 地址和经过的代理服务器 IP 地址添加到代理请求头中
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # 将匹配的请求代理到 http://127.0.0.1:20263 地址
            proxy_pass http://host.docker.internal:20263;
        }

        # location 块：匹配以 /api/group/ 开头的请求路径
        location /api/group/ {
            # 指定鉴权地址，请求会先经过 /api/auth 进行鉴权
            auth_request /api/auth; 
            # 将客户端请求的主机名添加到代理请求头中
            proxy_set_header Host $http_host;
            # 将客户端的真实 IP 地址添加到代理请求头中
            proxy_set_header X-Real-IP $remote_addr;
            # 将客户端的远程主机地址添加到代理请求头中
            proxy_set_header REMOTE-HOST $remote_addr;
            # 将客户端的 IP 地址和经过的代理服务器 IP 地址添加到代理请求头中
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # 将匹配的请求代理到 http://127.0.0.1:20264 地址
            proxy_pass http://host.docker.internal:20264;
        }
    }
}